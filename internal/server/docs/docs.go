// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://tldrlegal.com/license/mit-license"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/gpg/decrypt": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Decrypts data using loaded GPG Private Key",
                "operationId": "gpg-data-decrypt",
                "parameters": [
                    {
                        "description": "Information to decrypt",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGDecryptData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GPGDecryptedData"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/gpg/encrypt": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Encrypts data for a GPG Key",
                "operationId": "gpg-data-encrypt",
                "parameters": [
                    {
                        "description": "Information to encrypt to public key",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGEncryptData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "wcDMA8HPMfuMKotZAQwADzmQgwJiz3p5suaYpPwCbOluqvu2O5kVitJNO86KfkSYgbR0y67c+fGk5nO+Zm66qeolXLqVBHUvSnpZf9jMupRZLRmSZ0JmmvXoJIdiahj+NLwF6NVBvmoJ8BkMEQkr5oCNkKBveaCYXdQ7Gba2buICwxxwEmq3LV6/D0Zg4AmKX/k2N1kjRGJaUeHH3oU1YEjPo3A3bo9EZLGLI+J5VSlxkydxXUkF2TISKCr2rkhUmH5E7CUFu6H2nOofxk9tJDoSfjACkEjFKdg3BbTqNlYeuNmdJHwLfHDI+WcbL3/Hsl5MVnyHGeztsj0jn2bAIcT9FHfw1W3LUpaTNlemfrn52la7zN3r2588JDRbSaqLQ/d5+3hHWyE7RsRL0jdpEj/HM3ue2mi6GfyxDZy1DxdZsy7kqoYbBIwbtCdqZetU+bH6hWk92BY89AJUpV7xPCzRozw5WvCTsPYsu10JDvvPvj1c47BA9KlJ1wTcB2lYhmoX39T3ymjMKJ+6NAOF0uAB5PToGBs3BjE4MsxQHMLchK3hTuXg+uAY4fVU4I3jFyDPs8zYKsfgCOIHYBV84Obhm9rgqOAh4Ifi+klQeOCf4+p0IGeF6b6+4IPiAtTxRuB+5KnAAWAlBpwJWAqwNJ68HIjiN9UOgeGU+wA=",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/gpg/generateKey": {
            "post": {
                "description": "Generates a new GPG Key by specifying the Identifier, Bits and Password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Generates a new GPG Key",
                "operationId": "gpg-key-generate",
                "parameters": [
                    {
                        "description": "Information to generate the key. The minimum acceptable bits is 2048.",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGGenerateKeyData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/gpg/sign": {
            "post": {
                "description": "Signs a payload using the specified GPG key and returns the signature in GPG Format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Signs a payload in GPG Format",
                "operationId": "gpg-data-sign",
                "parameters": [
                    {
                        "description": "Data to sign",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGSignData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "-----BEGIN PGP SIGNATURE-----\\n\\nwsDcBAABCgAQBQJf+LriCRAFUfRSq+RjpAAAuL0MAGGrSJfK/tnMkwZ2Rkh3JcvF\\nE8WU8jwc8quz+0p9gMDscby0jShJ2G2XXMm3WAYXW88J6h8u2E/lTb6l3oBq/FPb\\n15gTM5Ie0p0kHBUlgP5bkV9EF9+VQif40fhVX7OPrS27jWtVNP374ARzSIgKMLa6\\nKBZhV1eQecLIlEYXahUP9jyt4cR4A4d9P+YJS/L6d/tQT4g9DBo66hYt5lu4sagG\\nDHsW2HK9I7fizCBaE8azLtQd3RRFTWZshln7OGVypwcdbzWbYr5uEhituxAnZKS4\\nSWwI0hgj1OkZeOhKwaydtITnaeH+nmlLBzhGKQWjCiLlsDNkkp3/4FKOuYJkYXeZ\\nm61GV6G5ZpW/gFVJXXyPz6ElNfWCorZQvxLbY4YWTBLdLyblHnp9kshav6dnexN1\\nwQyBDk8jxucmKNE8kCu591dPj/g/H38/zpGZQhj8Firb0rCFumqsAwxFeyTEFjVI\\ncyDHa5K+ytmSrITIdQUUsp1M4UQiRH63c1HYOLQurw==\\n=BRZt\\n-----END PGP SIGNATURE-----",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/gpg/signQuanto": {
            "post": {
                "description": "Signs a payload using the specified GPG key and returns the signature in Quanto Format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Signs a payload in Quanto Format",
                "operationId": "gpg-data-sign-quanto",
                "parameters": [
                    {
                        "description": "Data to sign",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGSignData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/gpg/unlockKey": {
            "post": {
                "description": "Unlocks a locked pre-loaded key inside remote signer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Unlocks a pre-loaded key",
                "operationId": "gpg-key-unlock",
                "parameters": [
                    {
                        "description": "Unlock Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGUnlockKeyData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/gpg/verifySignature": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Verifies a signature in GPG Format",
                "operationId": "gpg-data-verify",
                "parameters": [
                    {
                        "description": "Information to verify a signature in GPG format",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGVerifySignatureDataNonQuanto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/gpg/verifySignatureQuanto": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GPG Operations"
                ],
                "summary": "Verifies a signature in Quanto Format",
                "operationId": "gpg-data-verify-quanto",
                "parameters": [
                    {
                        "description": "Information to verify a signature in quanto format",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPGVerifySignatureData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/pks/add": {
            "post": {
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "SKS"
                ],
                "summary": "GPG SKS Keyserver Lookup",
                "operationId": "hkp-add",
                "parameters": [
                    {
                        "description": "GPG Public Key",
                        "name": "publickey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        },
        "/pks/lookup": {
            "get": {
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "SKS"
                ],
                "summary": "GPG SKS Keyserver Lookup",
                "operationId": "hkp-lookup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HKP Operation. Valid values: get, index, vindex",
                        "name": "op",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "HKP Operation options. Valid values: mr, nm",
                        "name": "options",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "HKP Search Value",
                        "name": "search",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "result of the query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/QuantoError.ErrorObject"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "QuantoError.ErrorObject": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "type": "string",
                    "example": "INVALID_FIELD_DATA"
                },
                "errorData": {
                    "type": "object"
                },
                "errorField": {
                    "type": "string",
                    "example": "fieldName"
                },
                "message": {
                    "type": "string",
                    "example": "error example"
                },
                "stackTrace": {
                    "type": "string"
                }
            }
        },
        "models.GPGDecryptData": {
            "type": "object",
            "properties": {
                "asciiArmoredData": {
                    "type": "string",
                    "example": "wcDMA8HPMfuMKotZAQwADzmQgwJiz3p5suaYpPwCbOluqvu2O5kVitJNO86KfkSYgbR0y67c+fGk5nO+Zm66qeolXLqVBHUvSnpZf9jMupRZLRmSZ0JmmvXoJIdiahj+NLwF6NVBvmoJ8BkMEQkr5oCNkKBveaCYXdQ7Gba2buICwxxwEmq3LV6/D0Zg4AmKX/k2N1kjRGJaUeHH3oU1YEjPo3A3bo9EZLGLI+J5VSlxkydxXUkF2TISKCr2rkhUmH5E7CUFu6H2nOofxk9tJDoSfjACkEjFKdg3BbTqNlYeuNmdJHwLfHDI+WcbL3/Hsl5MVnyHGeztsj0jn2bAIcT9FHfw1W3LUpaTNlemfrn52la7zN3r2588JDRbSaqLQ/d5+3hHWyE7RsRL0jdpEj/HM3ue2mi6GfyxDZy1DxdZsy7kqoYbBIwbtCdqZetU+bH6hWk92BY89AJUpV7xPCzRozw5WvCTsPYsu10JDvvPvj1c47BA9KlJ1wTcB2lYhmoX39T3ymjMKJ+6NAOF0uAB5PToGBs3BjE4MsxQHMLchK3hTuXg+uAY4fVU4I3jFyDPs8zYKsfgCOIHYBV84Obhm9rgqOAh4Ifi+klQeOCf4+p0IGeF6b6+4IPiAtTxRuB+5KnAAWAlBpwJWAqwNJ68HIjiN9UOgeGU+wA="
                },
                "dataOnly": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.GPGDecryptedData": {
            "type": "object",
            "properties": {
                "base64Data": {
                    "type": "string",
                    "example": "SGVsbG8gd29ybGQK"
                },
                "filename": {
                    "type": "string",
                    "example": "hello world.txt"
                },
                "fingerPrint": {
                    "type": "string",
                    "example": "C1CF31FB8C2A8B59"
                },
                "isIntegrityOK": {
                    "type": "boolean",
                    "example": false
                },
                "isIntegrityProtected": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.GPGEncryptData": {
            "type": "object",
            "properties": {
                "base64Data": {
                    "type": "string",
                    "example": "SGVsbG8gd29ybGQK"
                },
                "dataOnly": {
                    "type": "boolean",
                    "example": true
                },
                "filename": {
                    "type": "string",
                    "example": "hello world.txt"
                },
                "fingerPrint": {
                    "type": "string",
                    "example": "0551F452ABE463A4"
                }
            }
        },
        "models.GPGGenerateKeyData": {
            "type": "object",
            "properties": {
                "bits": {
                    "type": "integer",
                    "example": 4096
                },
                "identifier": {
                    "type": "string",
                    "example": "John HUEBR \u003cjohn@huebr.com\u003e"
                },
                "password": {
                    "type": "string",
                    "example": "I think you will never guess"
                }
            }
        },
        "models.GPGSignData": {
            "type": "object",
            "properties": {
                "base64Data": {
                    "type": "string",
                    "example": "SGVsbG8gd29ybGQK"
                },
                "fingerPrint": {
                    "type": "string",
                    "example": "0551F452ABE463A4"
                }
            }
        },
        "models.GPGUnlockKeyData": {
            "type": "object",
            "properties": {
                "fingerPrint": {
                    "type": "string",
                    "example": "0551F452ABE463A4"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "models.GPGVerifySignatureData": {
            "type": "object",
            "properties": {
                "base64Data": {
                    "type": "string",
                    "example": "SGVsbG8gd29ybGQK"
                },
                "signature": {
                    "type": "string",
                    "example": "0551F452ABE463A4_SHA512_wsDcBAABCgAQBQJf+LYnCRAFUfRSq+RjpAAA7/oMACHJPMtQs4rr0uxX4AMZ8akb+x2p5ZYL+uRug+zctp82sJEJmL76HG++UyzDmMUCagJ+LBWp2RcCQvfsIhX5MqD7lPkEdtl0uNCIU40apvzn1+0kndl7LnFtzyHMWrHrRqEFGJ0E2APPqv7g1pehVKeusMOkTNUmmsJNgZBYrluZxHnai/Rudoe9jBxihY4ALF0eOyTCHbtWy0z6fll3Bo/iPe777kplDXmTBzCEM8uD3/VZmY6pGn6oXUov/z8Dcrg2x5qT4i5DgdF8OSLbsxVW2OIV8DwCicQCT2tK95fctBqJ22vfmhNlxI3KzI9ShxeV6Eci5p5Zydgoh77pDiWDysrq1dOZ+o7T+ij72K3s63w3loERFVoDxDuKG3jS3+fj+ggqqtpUpm957+9+4QlnJqZk0v9TKT661HnoH4MfZR3muBir8/dgF4mNtuQLSswOxdVs1sHSC3ssTIzzpQqeI2iy3m8Svgl5unAdv2QE81EM/wT5brc2R/abSRz52A===J34T"
                }
            }
        },
        "models.GPGVerifySignatureDataNonQuanto": {
            "type": "object",
            "properties": {
                "base64Data": {
                    "type": "string",
                    "example": "SGVsbG8gd29ybGQK"
                },
                "signature": {
                    "type": "string",
                    "example": "-----BEGIN PGP SIGNATURE-----\n\nwsDcBAABCgAQBQJf+LriCRAFUfRSq+RjpAAAuL0MAGGrSJfK/tnMkwZ2Rkh3JcvF\nE8WU8jwc8quz+0p9gMDscby0jShJ2G2XXMm3WAYXW88J6h8u2E/lTb6l3oBq/FPb\n15gTM5Ie0p0kHBUlgP5bkV9EF9+VQif40fhVX7OPrS27jWtVNP374ARzSIgKMLa6\nKBZhV1eQecLIlEYXahUP9jyt4cR4A4d9P+YJS/L6d/tQT4g9DBo66hYt5lu4sagG\nDHsW2HK9I7fizCBaE8azLtQd3RRFTWZshln7OGVypwcdbzWbYr5uEhituxAnZKS4\nSWwI0hgj1OkZeOhKwaydtITnaeH+nmlLBzhGKQWjCiLlsDNkkp3/4FKOuYJkYXeZ\nm61GV6G5ZpW/gFVJXXyPz6ElNfWCorZQvxLbY4YWTBLdLyblHnp9kshav6dnexN1\nwQyBDk8jxucmKNE8kCu591dPj/g/H38/zpGZQhj8Firb0rCFumqsAwxFeyTEFjVI\ncyDHa5K+ytmSrITIdQUUsp1M4UQiRH63c1HYOLQurw==\n=BRZt\n-----END PGP SIGNATURE-----"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Operations using GPG Keys like Encrypt, Decrypt, Sign, Verify",
            "name": "GPG Operations"
        },
        {
            "description": "Operations for encrypting / decrypting JSON Data",
            "name": "Field Cipher"
        },
        {
            "description": "Operations for key load and store",
            "name": "Key Store"
        },
        {
            "description": "Operations for a REST optimized Public Key Server",
            "name": "Public Key Server"
        },
        {
            "description": "Operations for Standard PGP Public Key Server",
            "name": "SKS",
            "externalDocs": {
                "url": "https://tools.ietf.org/html/draft-shaw-openpgp-hkp-00"
            }
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/remoteSigner",
	Schemes:     []string{},
	Title:       "Swagger Remote Signer API",
	Description: "This is a chevron remote-signer server",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
